package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/google/uuid"
	"github.com/llmcontext/gomcp/logger"
	"github.com/llmcontext/gomcp/proxy"
	"github.com/llmcontext/gomcp/transport"
	"github.com/llmcontext/gomcp/types"
	"github.com/llmcontext/gomcp/version"
	"github.com/spf13/cobra"
)

const (
	ProxyClientName        = "gomcp proxy"
	DefaultProxyWhatIsThat = "configuration file for gomcp-proxy. Do NOT edit this file."
	DefaultProxyMoreInfo   = "More information about gomcp-proxy can be found at https://github.com/llmcontext/gomcp"
)

var (
	withCurrentWorkingDirectory bool
	proxyCmd                    = &cobra.Command{
		Use:   "proxy [flags] -- [program] [program arguments...]",
		Short: "proxy for MCP servers",
		Long: `Proxy launches an MCP-compatible program with the specified arguments.

Example:
	gomcp proxy -- mcpserver --arg1 value1 --arg2 value2
	gomcp proxy --cwd -- mcpserver --arg1 value1`,
		Args: cobra.ArbitraryArgs,
		Run: func(cmd *cobra.Command, args []string) {
			var err error
			logger := logger.NewTermLogger(debug)

			// Get args after --
			dashIdx := cmd.ArgsLenAtDash()

			// banner
			logger.Header(fmt.Sprintf("%s - %s", ProxyClientName, version.Version))

			currentWorkingDirectory := ""
			if withCurrentWorkingDirectory {
				// get the current working directory
				currentWorkingDirectory, err = os.Getwd()
				if err != nil {
					logger.Error("Failed to get current working directory", types.LogArg{"error": err})
					os.Exit(1)
				}
			}

			// read .env file
			envFile := filepath.Join(currentWorkingDirectory, ".env")
			if _, err := os.Stat(envFile); err == nil {
				loadEnvFile(envFile)
			}

			var programName string
			var programArgs []string

			if dashIdx >= 0 {
				// -- was used, take everything after it
				programName = args[dashIdx]
				programArgs = args[dashIdx+1:]
			} else {
				logger.Error("No -- found in the arguments to specify the MCP server program name and arguments", types.LogArg{"args": args})
				os.Exit(1)
			}

			// if delete {
			// 	logger.Info("# deleting proxy configuration file", types.LogArg{"configPath": proxyConfig.ConfigurationFilePath})
			// 	// if the configuration file exists, we delete it
			// 	if _, err := os.Stat(proxyConfig.ConfigurationFilePath); err == nil {
			// 		logger.Info("# proxy delete file", types.LogArg{"configPath": proxyConfig.ConfigurationFilePath})
			// 		os.Remove(proxyConfig.ConfigurationFilePath)
			// 	}
			// 	if proxyConfig.ProxyId != "" {
			// 		var proxyDefinition = filepath.Join(defaults.DefaultHubConfigurationDirectory, defaults.DefaultProxyToolsDirectory, fmt.Sprintf("%s.json", proxyConfig.ProxyId))
			// 		if _, err := os.Stat(proxyDefinition); err == nil {
			// 			logger.Info("# proxy delete file", types.LogArg{"toolsFilePath": proxyDefinition})
			// 			os.Remove(proxyDefinition)
			// 		}
			// 	}
			// 	logger.Info("# proxy delete", types.LogArg{})
			// 	os.Exit(0)
			// }

			if programName == "" {
				logger.Error("Please provide, after --,  a program name as the first argument, and optionally arguments", types.LogArg{"args": args})
				os.Exit(1)
			}

			uuidProxyId, err := uuid.NewV7()
			if err != nil {
				logger.Error("Failed to generate proxy id", types.LogArg{"error": err})
				os.Exit(1)
			}

			proxyId := uuidProxyId.String()

			logger.Info("MCP server is:", types.LogArg{
				"programName": programName,
				"programArgs": strings.Join(programArgs, ", "),
				"proxyId":     proxyId,
			})

			var program = &transport.ProxiedMcpServerDescription{
				ProxyId:                 proxyId,
				CurrentWorkingDirectory: currentWorkingDirectory,
				ProgramName:             programName,
				ProgramArgs:             programArgs,
			}

			pxy := proxy.NewProxy(program, logger)

			pxy.Start()
		},
	}
)

func init() {
	proxyCmd.Flags().BoolVarP(&withCurrentWorkingDirectory, "cwd", "w", false, "Use the current working directory for the proxy")
	rootCmd.AddCommand(proxyCmd)
}

func loadEnvFile(filename string) error {
	content, err := os.ReadFile(filename)
	if err != nil {
		return err
	}

	lines := strings.Split(string(content), "\n")
	for _, line := range lines {
		// Skip empty lines and comments
		if line = strings.TrimSpace(line); line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Remove quotes if present
		value = strings.Trim(value, `"'`)

		os.Setenv(key, value)
	}
	return nil
}
